/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: App manager interfaces to privileged apps.This interface exposes information
 *   about the installed and running 
	applications. It shall typically be exposed
 *   by App Manager only to privileged apps/processes that would need such
 *   information.
	An example is a Launcher process which would need information
 *   provided by this interface
 */
#ifndef ORG_GENIVI_APPFW_App_Manager_Core_DBUS_STUB_ADAPTER_HPP_
#define ORG_GENIVI_APPFW_App_Manager_Core_DBUS_STUB_ADAPTER_HPP_

#include <org/genivi/appfw/AppManagerCoreStub.hpp>
#include "org/genivi/appfw/AppManagerCoreDBusDeployment.hpp"        
#include <org/genivi/appfw/AppManagerCoreDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace appfw {

typedef CommonAPI::DBus::DBusStubAdapterHelper<AppManagerCoreStub> AppManagerCoreDBusStubAdapterHelper;

class AppManagerCoreDBusStubAdapterInternal
    : public virtual AppManagerCoreStubAdapter,
      public AppManagerCoreDBusStubAdapterHelper
{
public:
    AppManagerCoreDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~AppManagerCoreDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return AppManagerCore::getInterface();
    }


    /**
     * description: This broadcast is emitted whenever there is addition or deletion of apps,
     *   change in capability of 
    		apps to handle mimes or similar changes.It is
     *   recommended to call getInstalledApps and getAppInfo (on interested apps)
    		as
     *   needed when this broadcast is received.
     */
    void fireAppsInfoUpdatedEvent();


    const AppManagerCoreDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::org::genivi::appfw::AppManagerCoreStub,
        CommonAPI::Version
        > getAppManagerCoreInterfaceVersionStubDispatcher;



/**
 * description: This method returns an array of app IDs which are reverse DNS style names
 *   stored by app manager 
		during app installation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManagerCoreStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
    
    > getInstalledAppsStubDispatcher;
/**
 * description: This method provides the information of the app from manifest data encapsulated
 *   in the AppInfo struct.
		AppId is a reverse DNS style name of the app which
 *   should be a part of manifest information.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManagerCoreStub,
    std::tuple<std::string>,
    std::tuple<AppManagerCore::AppInfo>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<AppManagerCore_::AppInfoDeployment_t>
    
    > getAppInfoStubDispatcher;
/**
 * description: This method launches an app using the AppId. App manager resolves the AppId to
 *   an entry point 
		and launches it.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManagerCoreStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > launchAppStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    AppManagerCoreDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class AppManagerCoreDBusStubAdapter
    : public AppManagerCoreDBusStubAdapterInternal,
      public std::enable_shared_from_this<AppManagerCoreDBusStubAdapter> {
public:
    AppManagerCoreDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          AppManagerCoreDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace appfw
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_APPFW_App_Manager_Core_DBUS_STUB_ADAPTER_HPP_
