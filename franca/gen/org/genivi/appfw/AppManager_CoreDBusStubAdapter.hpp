/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface is exposed by app manager to privileged apps
 */
#ifndef ORG_GENIVI_APPFW_App_Manager__Core_DBUS_STUB_ADAPTER_HPP_
#define ORG_GENIVI_APPFW_App_Manager__Core_DBUS_STUB_ADAPTER_HPP_

#include <org/genivi/appfw/AppManager_CoreStub.hpp>
#include "org/genivi/appfw/AppManager_CoreDBusDeployment.hpp"        
#include <org/genivi/appfw/AppManager_CoreDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace appfw {

typedef CommonAPI::DBus::DBusStubAdapterHelper<AppManager_CoreStub> AppManager_CoreDBusStubAdapterHelper;

class AppManager_CoreDBusStubAdapterInternal
    : public virtual AppManager_CoreStubAdapter,
      public AppManager_CoreDBusStubAdapterHelper
{
public:
    AppManager_CoreDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~AppManager_CoreDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return AppManager_Core::getInterface();
    }


    /**
     * description: This should signal the addition or deletion of new apps, change in capability
     *   of apps to handle mimes etc. It si adviced to call GetAppMimeTable and
     *   GetInstalledApps as needed when this broadcast is received.
     */
    void fireAppsInfoUpdatedEvent();


    const AppManager_CoreDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::org::genivi::appfw::AppManager_CoreStub,
        CommonAPI::Version
        > getAppManager_CoreInterfaceVersionStubDispatcher;



/**
 * description: a function to enumerate all apps in the system. It returns an array of app IDs
 *   which are reverse DNS style names 
		stored by app manager during app
 *   installation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
    
    > getInstalledAppsStubDispatcher;
/**
 * description: This method provides the information of the app from manifest data encapsulated
 *   in the AppInfo struct
		app_id is a reverse DNS style name of the app which
 *   should be a part of manifest information
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<std::string>,
    std::tuple<AppManager_Core::AppInfo>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<AppManager_Core_::AppInfoDeployment_t>
    
    > getAppInfoStubDispatcher;
/**
 * description: launch an app using the app_id. App manager resolves the app_id to an entry
 *   point and launches it.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > launchAppStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    AppManager_CoreDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class AppManager_CoreDBusStubAdapter
    : public AppManager_CoreDBusStubAdapterInternal,
      public std::enable_shared_from_this<AppManager_CoreDBusStubAdapter> {
public:
    AppManager_CoreDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          AppManager_CoreDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace appfw
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_APPFW_App_Manager__Core_DBUS_STUB_ADAPTER_HPP_
