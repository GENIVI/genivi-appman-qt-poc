/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: App manager interfaces to privileged apps.This interface exposes information
 *   about the installed and running 
	applications. It shall typically be exposed
 *   by App Manager only to privileged apps/processes that would need such
 *   information.
	An example is a Launcher process which would need information
 *   provided by this interface
 */
#include <org/genivi/appfw/AppManagerCoreDBusProxy.hpp>

namespace org {
namespace genivi {
namespace appfw {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createAppManagerCoreDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<AppManagerCoreDBusProxy>(_address, _connection);
}

INITIALIZER(registerAppManagerCoreDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		AppManagerCore::getInterface(),
		&createAppManagerCoreDBusProxy);
}

AppManagerCoreDBusProxy::AppManagerCoreDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		appsInfoUpdated_(*this, "appsInfoUpdated", "", std::make_tuple())
{
}


AppManagerCoreDBusProxy::AppsInfoUpdatedEvent& AppManagerCoreDBusProxy::getAppsInfoUpdatedEvent() {
    return appsInfoUpdated_;
}
    
    /**
     * description: This method returns an array of app IDs which are reverse DNS style names
     *   stored by app manager 
    		during app installation
     */
    void AppManagerCoreDBusProxy::getInstalledApps(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_AppIds, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_AppIds(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getInstalledApps",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_AppIds);
_AppIds = deploy_AppIds.getValue();
}
    std::future<CommonAPI::CallStatus> AppManagerCoreDBusProxy::getInstalledAppsAsync(GetInstalledAppsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_AppIds(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getInstalledApps",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> _AppIds) {
        	if (_callback)
        		_callback(_internalCallStatus, _AppIds.getValue());
        },
        std::make_tuple(deploy_AppIds));
    }
    /**
     * description: This method provides the information of the app from manifest data encapsulated
     *   in the AppInfo struct.
    		AppId is a reverse DNS style name of the app which
     *   should be a part of manifest information.
     */
    void AppManagerCoreDBusProxy::getAppInfo(const std::string &_AppId, CommonAPI::CallStatus &_internalCallStatus, AppManagerCore::AppInfo &_Info, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_AppId(_AppId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<AppManagerCore::AppInfo, AppManagerCore_::AppInfoDeployment_t> deploy_Info(static_cast<AppManagerCore_::AppInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AppManagerCore::AppInfo,AppManagerCore_::AppInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getAppInfo",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_AppId,
_internalCallStatus,
deploy_Info);
_Info = deploy_Info.getValue();
}
    std::future<CommonAPI::CallStatus> AppManagerCoreDBusProxy::getAppInfoAsync(const std::string &_AppId, GetAppInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_AppId(_AppId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<AppManagerCore::AppInfo, AppManagerCore_::AppInfoDeployment_t> deploy_Info(static_cast<AppManagerCore_::AppInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AppManagerCore::AppInfo,AppManagerCore_::AppInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getAppInfo",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_AppId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<AppManagerCore::AppInfo, AppManagerCore_::AppInfoDeployment_t> _Info) {
        	if (_callback)
        		_callback(_internalCallStatus, _Info.getValue());
        },
        std::make_tuple(deploy_Info));
    }
    /**
     * description: This method launches an app using the AppId. App manager resolves the AppId to
     *   an entry point 
    		and launches it.
     */
    void AppManagerCoreDBusProxy::launchApp(const std::string &_AppId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_AppId(_AppId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "launchApp",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_AppId,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> AppManagerCoreDBusProxy::launchAppAsync(const std::string &_AppId, LaunchAppAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_AppId(_AppId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "launchApp",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_AppId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void AppManagerCoreDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 0;
      }

      } // namespace appfw
      } // namespace genivi
      } // namespace org
