/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface is exposed by app manager to privileged apps
 */
#ifndef ORG_GENIVI_APPFW_App_Manager__Core_DBUS_PROXY_HPP_
#define ORG_GENIVI_APPFW_App_Manager__Core_DBUS_PROXY_HPP_

#include <org/genivi/appfw/AppManager_CoreProxyBase.hpp>
#include "org/genivi/appfw/AppManager_CoreDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace appfw {

class AppManager_CoreDBusProxy
    : virtual public AppManager_CoreProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    AppManager_CoreDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~AppManager_CoreDBusProxy() { }


    virtual AppsInfoUpdatedEvent& getAppsInfoUpdatedEvent();

    /**
     * description: a function to enumerate all apps in the system. It returns an array of app IDs
     *   which are reverse DNS style names 
    		stored by app manager during app
     *   installation
     */
    virtual void GetInstalledApps(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_app_ids, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetInstalledAppsAsync(GetInstalledAppsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method provides the information of the app from manifest data encapsulated
     *   in the AppInfo struct
    		app_id is a reverse DNS style name of the app which
     *   should be a part of manifest information
     */
    virtual void GetAppInfo(const std::string &_app_id, CommonAPI::CallStatus &_internalCallStatus, AppManager_Core::AppInfo &_info, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetAppInfoAsync(const std::string &_app_id, GetAppInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: launch an app using the app_id. App manager resolves the app_id to an entry
     *   point and launches it.
     */
    virtual void LaunchApp(const std::string &_app_id, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> LaunchAppAsync(const std::string &_app_id, LaunchAppAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<AppsInfoUpdatedEvent> appsInfoUpdated_;

};

} // namespace appfw
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_APPFW_App_Manager__Core_DBUS_PROXY_HPP_

