/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface is exposed by app manager to privileged apps
 */
#include <org/genivi/appfw/AppManager_CoreDBusProxy.hpp>

namespace org {
namespace genivi {
namespace appfw {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createAppManager_CoreDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<AppManager_CoreDBusProxy>(_address, _connection);
}

INITIALIZER(registerAppManager_CoreDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		AppManager_Core::getInterface(),
		&createAppManager_CoreDBusProxy);
}

AppManager_CoreDBusProxy::AppManager_CoreDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		appsInfoUpdated_(*this, "AppsInfoUpdated", "", std::make_tuple())
{
}


AppManager_CoreDBusProxy::AppsInfoUpdatedEvent& AppManager_CoreDBusProxy::getAppsInfoUpdatedEvent() {
    return appsInfoUpdated_;
}
    
    /**
     * description: a function to enumerate all apps in the system. It returns an array of app IDs
     *   which are reverse DNS style names 
    		stored by app manager during app
     *   installation
     */
    void AppManager_CoreDBusProxy::GetInstalledApps(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_app_ids, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_app_ids(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "GetInstalledApps",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_app_ids);
_app_ids = deploy_app_ids.getValue();
}
    std::future<CommonAPI::CallStatus> AppManager_CoreDBusProxy::GetInstalledAppsAsync(GetInstalledAppsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_app_ids(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "GetInstalledApps",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> _app_ids) {
        	if (_callback)
        		_callback(_internalCallStatus, _app_ids.getValue());
        },
        std::make_tuple(deploy_app_ids));
    }
    /**
     * description: This method provides the information of the app from manifest data encapsulated
     *   in the AppInfo struct
    		app_id is a reverse DNS style name of the app which
     *   should be a part of manifest information
     */
    void AppManager_CoreDBusProxy::GetAppInfo(const std::string &_app_id, CommonAPI::CallStatus &_internalCallStatus, AppManager_Core::AppInfo &_info, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_app_id(_app_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<AppManager_Core::AppInfo, AppManager_Core_::AppInfoDeployment_t> deploy_info(static_cast<AppManager_Core_::AppInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AppManager_Core::AppInfo,AppManager_Core_::AppInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "GetAppInfo",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_app_id,
_internalCallStatus,
deploy_info);
_info = deploy_info.getValue();
}
    std::future<CommonAPI::CallStatus> AppManager_CoreDBusProxy::GetAppInfoAsync(const std::string &_app_id, GetAppInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_app_id(_app_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<AppManager_Core::AppInfo, AppManager_Core_::AppInfoDeployment_t> deploy_info(static_cast<AppManager_Core_::AppInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AppManager_Core::AppInfo,AppManager_Core_::AppInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "GetAppInfo",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_app_id,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<AppManager_Core::AppInfo, AppManager_Core_::AppInfoDeployment_t> _info) {
        	if (_callback)
        		_callback(_internalCallStatus, _info.getValue());
        },
        std::make_tuple(deploy_info));
    }
    /**
     * description: launch an app using the app_id. App manager resolves the app_id to an entry
     *   point and launches it.
     */
    void AppManager_CoreDBusProxy::LaunchApp(const std::string &_app_id, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_app_id(_app_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "LaunchApp",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_app_id,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> AppManager_CoreDBusProxy::LaunchAppAsync(const std::string &_app_id, LaunchAppAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_app_id(_app_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "LaunchApp",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_app_id,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void AppManager_CoreDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 0;
      }

      } // namespace appfw
      } // namespace genivi
      } // namespace org
