/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: App manager interfaces to privileged apps.This interface exposes information
 *   about the installed and running 
	applications. It shall typically be exposed
 *   by App Manager only to privileged apps/processes that would need such
 *   information.
	An example is a Launcher process which would need information
 *   provided by this interface
 */
#ifndef ORG_GENIVI_APPFW_App_Manager_Core_DBUS_PROXY_HPP_
#define ORG_GENIVI_APPFW_App_Manager_Core_DBUS_PROXY_HPP_

#include <org/genivi/appfw/AppManagerCoreProxyBase.hpp>
#include "org/genivi/appfw/AppManagerCoreDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace appfw {

class AppManagerCoreDBusProxy
    : virtual public AppManagerCoreProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    AppManagerCoreDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~AppManagerCoreDBusProxy() { }


    virtual AppsInfoUpdatedEvent& getAppsInfoUpdatedEvent();

    /**
     * description: This method returns an array of app IDs which are reverse DNS style names
     *   stored by app manager 
    		during app installation
     */
    virtual void getInstalledApps(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_AppIds, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getInstalledAppsAsync(GetInstalledAppsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method provides the information of the app from manifest data encapsulated
     *   in the AppInfo struct.
    		AppId is a reverse DNS style name of the app which
     *   should be a part of manifest information.
     */
    virtual void getAppInfo(const std::string &_AppId, CommonAPI::CallStatus &_internalCallStatus, AppManagerCore::AppInfo &_Info, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAppInfoAsync(const std::string &_AppId, GetAppInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method launches an app using the AppId. App manager resolves the AppId to
     *   an entry point 
    		and launches it.
     */
    virtual void launchApp(const std::string &_AppId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> launchAppAsync(const std::string &_AppId, LaunchAppAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<AppsInfoUpdatedEvent> appsInfoUpdated_;

};

} // namespace appfw
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_APPFW_App_Manager_Core_DBUS_PROXY_HPP_

