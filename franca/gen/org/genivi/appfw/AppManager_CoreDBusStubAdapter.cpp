/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <org/genivi/appfw/AppManager_Core.hpp>
#include <org/genivi/appfw/AppManager_CoreDBusStubAdapter.hpp>

namespace org {
namespace genivi {
namespace appfw {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createAppManager_CoreDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<AppManager_CoreDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerAppManager_CoreDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	AppManager_Core::getInterface(), &createAppManager_CoreDBusStubAdapter);
}

AppManager_CoreDBusStubAdapterInternal::~AppManager_CoreDBusStubAdapterInternal() {
    deactivateManagedInstances();
    AppManager_CoreDBusStubAdapterHelper::deinit();
}

void AppManager_CoreDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* AppManager_CoreDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: This should signal the addition or deletion of new apps, change in capability
         *   of apps to handle mimes etc. It si adviced to call GetAppMimeTable and
         *   GetInstalledApps as needed when this broadcast is received.
         */
        "<signal name=\"AppsInfoUpdated\">\n"
        "</signal>\n"
        /**
         * description: a function to enumerate all apps in the system. It returns an array of app IDs
         *   which are reverse DNS style names 
        		stored by app manager during app
         *   installation
         */
        "<method name=\"GetInstalledApps\">\n"
            "<arg name=\"_app_ids\" type=\"as\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method provides the information of the app from manifest data encapsulated
         *   in the AppInfo struct
        		app_id is a reverse DNS style name of the app which
         *   should be a part of manifest information
         */
        "<method name=\"GetAppInfo\">\n"
            "<arg name=\"_app_id\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_info\" type=\"(sa{ss})\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: launch an app using the app_id. App manager resolves the app_id to an entry
         *   point and launches it.
         */
        "<method name=\"LaunchApp\">\n"
            "<arg name=\"_app_id\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::org::genivi::appfw::AppManager_CoreStub,
        CommonAPI::Version
        > AppManager_CoreDBusStubAdapterInternal::getAppManager_CoreInterfaceVersionStubDispatcher(&AppManager_CoreStub::getInterfaceVersion, "uu");




/**
 * description: a function to enumerate all apps in the system. It returns an array of app IDs
 *   which are reverse DNS style names 
		stored by app manager during app
 *   installation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
    
    > AppManager_CoreDBusStubAdapterInternal::getInstalledAppsStubDispatcher(
    &AppManager_CoreStub::GetInstalledApps, "as",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)));

/**
 * description: This method provides the information of the app from manifest data encapsulated
 *   in the AppInfo struct
		app_id is a reverse DNS style name of the app which
 *   should be a part of manifest information
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<std::string>,
    std::tuple<AppManager_Core::AppInfo>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<AppManager_Core_::AppInfoDeployment_t>
    
    > AppManager_CoreDBusStubAdapterInternal::getAppInfoStubDispatcher(
    &AppManager_CoreStub::GetAppInfo, "(sa{ss})",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<AppManager_Core_::AppInfoDeployment_t*>(nullptr)));

/**
 * description: launch an app using the app_id. App manager resolves the app_id to an entry
 *   point and launches it.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::org::genivi::appfw::AppManager_CoreStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > AppManager_CoreDBusStubAdapterInternal::launchAppStubDispatcher(
    &AppManager_CoreStub::LaunchApp, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());



/**
 * description: This should signal the addition or deletion of new apps, change in capability
 *   of apps to handle mimes etc. It si adviced to call GetAppMimeTable and
 *   GetInstalledApps as needed when this broadcast is received.
 */
void AppManager_CoreDBusStubAdapterInternal::fireAppsInfoUpdatedEvent() {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    >>::sendSignal(
            *this,
            "AppsInfoUpdated",
            ""
    );
}


const AppManager_CoreDBusStubAdapterHelper::StubDispatcherTable& AppManager_CoreDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& AppManager_CoreDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

AppManager_CoreDBusStubAdapterInternal::AppManager_CoreDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      AppManager_CoreDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<AppManager_CoreStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: a function to enumerate all apps in the system. It returns an array of app IDs
             *   which are reverse DNS style names 
            		stored by app manager during app
             *   installation
             */
            { { "GetInstalledApps", "" }, &org::genivi::appfw::AppManager_CoreDBusStubAdapterInternal::getInstalledAppsStubDispatcher },
            /**
             * description: This method provides the information of the app from manifest data encapsulated
             *   in the AppInfo struct
            		app_id is a reverse DNS style name of the app which
             *   should be a part of manifest information
             */
            { { "GetAppInfo", "s" }, &org::genivi::appfw::AppManager_CoreDBusStubAdapterInternal::getAppInfoStubDispatcher },
            /**
             * description: launch an app using the app_id. App manager resolves the app_id to an entry
             *   point and launches it.
             */
            { { "LaunchApp", "s" }, &org::genivi::appfw::AppManager_CoreDBusStubAdapterInternal::launchAppStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::appfw::AppManager_CoreDBusStubAdapterInternal::getAppManager_CoreInterfaceVersionStubDispatcher });
}

bool AppManager_CoreDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace appfw
} // namespace genivi
} // namespace org
